darker

Image		Pixels above threshold		Seq			Par				Speedup

with square GRID

image00		111 (0.01%)					0.002416	0.000156		15.48
image01		231 (0.00%)					0.036925	0.000351		105.19
image02		135 (0.00%)					0.033726	0.000658		51.25
image03		735 (0.00%)					0.340821	0.002287		149
image04 	1503 (0.00%)				0.151429	0.001912		79.19
image05		9 (0.00%)					0.445976	0.003211		138.89
image06		4206 (0.00%)				0.588814	0.005860		100.48

with grid UNI

image00		0.000151	16
image01		0.000259	142
image02		0.000332	101.58
image03		0.001788	190.61
image04		0.001290	117.38
image05		0.002307	193.31
image06		0.004403	133.73
	

histogram

Image		Pixels above threshold		Seq			Par				Speedup	

image00		324 (0.04%)					0.003208	0.000101  		31.76		
image01		12 (0.00%)					0.032379	0.002080		15.56
image02		0 (0.00%)					0.043784	0.002550		17.17
image03		24 (0.00%)					0.200681	0.011821		16.97
image04		0 (0.00%)					0.197973	0.013899		14.24				
image05		12 (0.00%)					0.267590	0.009225		29		
image06		48 (0.01%)					0.616924	0.024237		25.45	

SEQ
Image05		
Image06		1.157487


with grid UNI
image00		0.000420	7.63
image01		0.003539	9.14	
image02		0.005623
image03		0.034272
image04		0.034269
image05		0.033029
image06		0.085662

BOH

0.000086	22.66
0.001510	12.54
0.002200	11.90
0.007944	22.80
0.012946	9.19
0.007465	33.25
0.021255	21.93



smooth

Image		Pixels above threshold		Seq			Par				Speedup	

images00	0 (0.00%)					0.061197	0.000786		77.85
images01	0 (0.00%)					0.607604	0.006609		91.93
images02	0 (0.00%)					0.858147	0.009223		93.04
images03	0 (0.00%)					5.865732	0.061720		95.03
images04	0 (0.00%)					4.233016	0.043625		97.03
images05	0 (0.00%)					7.766216	0.081083		95.78
images06	0 (0.00%)					16.743480	0.159923		104.69

Better 2d because we need square of pixels

Consider an image processing algorithm. Some of these may be interested in lines, but most are interested in rectangular areas of the image (say, filters). If I make my threads 2D in a block, then all threads handling a certain rectangle end up on the same warp and can share memory efficiently, right?

Whereas, if I organized threads 1D in a block, then threads handling a line (rather than a rectangular block) would be able to share memory.
